// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.1
// source: redis_grpc.proto

package redis_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RedisGrpcClient is the client API for RedisGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisGrpcClient interface {
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (RedisGrpc_SubscribeClient, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*IntResponse, error)
	Keys(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*StringListResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StringResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*StringResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*IntResponse, error)
	Lpush(ctx context.Context, in *LPushRequest, opts ...grpc.CallOption) (*IntResponse, error)
	Rpush(ctx context.Context, in *RPushRequest, opts ...grpc.CallOption) (*IntResponse, error)
}

type redisGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisGrpcClient(cc grpc.ClientConnInterface) RedisGrpcClient {
	return &redisGrpcClient{cc}
}

func (c *redisGrpcClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/redis_grpc.RedisGrpc/command", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisGrpcClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (RedisGrpc_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RedisGrpc_ServiceDesc.Streams[0], "/redis_grpc.RedisGrpc/subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &redisGrpcSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RedisGrpc_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type redisGrpcSubscribeClient struct {
	grpc.ClientStream
}

func (x *redisGrpcSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *redisGrpcClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, "/redis_grpc.RedisGrpc/publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisGrpcClient) Keys(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/redis_grpc.RedisGrpc/keys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisGrpcClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/redis_grpc.RedisGrpc/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisGrpcClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/redis_grpc.RedisGrpc/set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisGrpcClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, "/redis_grpc.RedisGrpc/del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisGrpcClient) Lpush(ctx context.Context, in *LPushRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, "/redis_grpc.RedisGrpc/lpush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisGrpcClient) Rpush(ctx context.Context, in *RPushRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, "/redis_grpc.RedisGrpc/rpush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisGrpcServer is the server API for RedisGrpc service.
// All implementations must embed UnimplementedRedisGrpcServer
// for forward compatibility
type RedisGrpcServer interface {
	Command(context.Context, *CommandRequest) (*CommandResponse, error)
	Subscribe(*SubscribeRequest, RedisGrpc_SubscribeServer) error
	Publish(context.Context, *PublishRequest) (*IntResponse, error)
	Keys(context.Context, *KeysRequest) (*StringListResponse, error)
	Get(context.Context, *GetRequest) (*StringResponse, error)
	Set(context.Context, *SetRequest) (*StringResponse, error)
	Del(context.Context, *DelRequest) (*IntResponse, error)
	Lpush(context.Context, *LPushRequest) (*IntResponse, error)
	Rpush(context.Context, *RPushRequest) (*IntResponse, error)
	mustEmbedUnimplementedRedisGrpcServer()
}

// UnimplementedRedisGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedRedisGrpcServer struct {
}

func (UnimplementedRedisGrpcServer) Command(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedRedisGrpcServer) Subscribe(*SubscribeRequest, RedisGrpc_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRedisGrpcServer) Publish(context.Context, *PublishRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedRedisGrpcServer) Keys(context.Context, *KeysRequest) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (UnimplementedRedisGrpcServer) Get(context.Context, *GetRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRedisGrpcServer) Set(context.Context, *SetRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRedisGrpcServer) Del(context.Context, *DelRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedRedisGrpcServer) Lpush(context.Context, *LPushRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lpush not implemented")
}
func (UnimplementedRedisGrpcServer) Rpush(context.Context, *RPushRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rpush not implemented")
}
func (UnimplementedRedisGrpcServer) mustEmbedUnimplementedRedisGrpcServer() {}

// UnsafeRedisGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisGrpcServer will
// result in compilation errors.
type UnsafeRedisGrpcServer interface {
	mustEmbedUnimplementedRedisGrpcServer()
}

func RegisterRedisGrpcServer(s grpc.ServiceRegistrar, srv RedisGrpcServer) {
	s.RegisterService(&RedisGrpc_ServiceDesc, srv)
}

func _RedisGrpc_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisGrpcServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis_grpc.RedisGrpc/command",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisGrpcServer).Command(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisGrpc_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RedisGrpcServer).Subscribe(m, &redisGrpcSubscribeServer{stream})
}

type RedisGrpc_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type redisGrpcSubscribeServer struct {
	grpc.ServerStream
}

func (x *redisGrpcSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RedisGrpc_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisGrpcServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis_grpc.RedisGrpc/publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisGrpcServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisGrpc_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisGrpcServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis_grpc.RedisGrpc/keys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisGrpcServer).Keys(ctx, req.(*KeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisGrpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisGrpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis_grpc.RedisGrpc/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisGrpcServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisGrpc_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisGrpcServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis_grpc.RedisGrpc/set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisGrpcServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisGrpc_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisGrpcServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis_grpc.RedisGrpc/del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisGrpcServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisGrpc_Lpush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisGrpcServer).Lpush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis_grpc.RedisGrpc/lpush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisGrpcServer).Lpush(ctx, req.(*LPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisGrpc_Rpush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisGrpcServer).Rpush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis_grpc.RedisGrpc/rpush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisGrpcServer).Rpush(ctx, req.(*RPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisGrpc_ServiceDesc is the grpc.ServiceDesc for RedisGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redis_grpc.RedisGrpc",
	HandlerType: (*RedisGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "command",
			Handler:    _RedisGrpc_Command_Handler,
		},
		{
			MethodName: "publish",
			Handler:    _RedisGrpc_Publish_Handler,
		},
		{
			MethodName: "keys",
			Handler:    _RedisGrpc_Keys_Handler,
		},
		{
			MethodName: "get",
			Handler:    _RedisGrpc_Get_Handler,
		},
		{
			MethodName: "set",
			Handler:    _RedisGrpc_Set_Handler,
		},
		{
			MethodName: "del",
			Handler:    _RedisGrpc_Del_Handler,
		},
		{
			MethodName: "lpush",
			Handler:    _RedisGrpc_Lpush_Handler,
		},
		{
			MethodName: "rpush",
			Handler:    _RedisGrpc_Rpush_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribe",
			Handler:       _RedisGrpc_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "redis_grpc.proto",
}
